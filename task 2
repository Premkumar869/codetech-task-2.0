#include <iostream>
#include <vector>
#include <iomanip> // for std::setprecision

using namespace std;

// Structure to hold student information
struct Student {
    int id;
    string name;
    int age;
    double grade;
};

// Function prototypes
void addStudent(vector<Student> &students);
void editStudent(vector<Student> &students);
void deleteStudent(vector<Student> &students);
void displayAllStudents(const vector<Student> &students);
void calculateGrade(vector<Student> &students);

int main() {
    vector<Student> students;
    int choice;

    do {
        // Display menu
        cout << "\n=== Student Management System ===\n";
        cout << "1. Add Student\n";
        cout << "2. Edit Student\n";
        cout << "3. Delete Student\n";
        cout << "4. Display All Students\n";
        cout << "5. Calculate Grades\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addStudent(students);
                break;
            case 2:
                editStudent(students);
                break;
            case 3:
                deleteStudent(students);
                break;
            case 4:
                displayAllStudents(students);
                break;
            case 5:
                calculateGrade(students);
                break;
            case 6:
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}

// Function to add a student
void addStudent(vector<Student> &students) {
    Student newStudent;
    cout << "\nEnter student ID: ";
    cin >> newStudent.id;
    cout << "Enter student name: ";
    cin.ignore();
    getline(cin, newStudent.name);
    cout << "Enter student age: ";
    cin >> newStudent.age;
    newStudent.grade = 0.0; // Initialize grade to 0
    students.push_back(newStudent);
    cout << "Student added successfully.\n";
}

// Function to edit a student's information
void editStudent(vector<Student> &students) {
    int id;
    cout << "\nEnter student ID to edit: ";
    cin >> id;

    bool found = false;
    for (size_t i = 0; i < students.size(); ++i) {
        if (students[i].id == id) {
            cout << "Enter new name for student: ";
            cin.ignore();
            getline(cin, students[i].name);
            cout << "Enter new age for student: ";
            cin >> students[i].age;
            cout << "Student information updated.\n";
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Student with ID " << id << " not found.\n";
    }
}

// Function to delete a student
void deleteStudent(vector<Student> &students) {
    int id;
    cout << "\nEnter student ID to delete: ";
    cin >> id;

    bool found = false;
    for (auto it = students.begin(); it != students.end(); ++it) {
        if (it->id == id) {
            it = students.erase(it); // Erase student
            cout << "Student deleted successfully.\n";
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Student with ID " << id << " not found.\n";
    }
}

// Function to display all students
void displayAllStudents(const vector<Student> &students) {
    if (students.empty()) {
        cout << "No students to display.\n";
    } else {
        cout << "\n=== All Students ===\n";
        cout << "ID\tName\tAge\tGrade\n";
        cout << "--------------------------------\n";
        for (const auto &student : students) {
            cout << student.id << "\t" << student.name << "\t" << student.age << "\t";
            if (student.grade == 0.0) {
                cout << "N/A\n";
            } else {
                cout << fixed << setprecision(2) << student.grade << "\n";
            }
        }
    }
}

// Function to calculate grades
void calculateGrade(vector<Student> &students) {
    for (auto &student : students) {
        // Simulated calculation, you can replace this with actual grade calculation logic
        student.grade = 70.0 + (rand() % 30); // Assigning random grades between 70 to100
    }
    cout << "Grades calculated successfully.\n";
}
